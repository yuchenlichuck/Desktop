function [edges] = sobel(img)
%SOBEL
%    Uses the sobel operator method for edge detection.
%    input: image - 3d array of RGB - pixels containing image
%    output: edges - 3d array of RGB - pixels sobel operator values
image=imread(img);
image = double(image);

kernelx = [ 1, 0, -1;
            2, 0, -2;
            1, 0, -1];

kernely = [  1, 2, 1;
             0, 0, 0;
            -1, -2, -1];

height = size(image,1);
width = size(image,2);
channel = size(image,3);

for i = 2:height - 1
    for j = 2:width - 1
        for k = 1:channel
            magx = 0;
            magy = 0;
            for a = 1:3
                for b = 1:3
                    magx = magx + (kernelx(a, b) * image(i + a - 2, j + b - 2, k));
                    magy = magy + (kernely(a, b) * image(i + a - 2, j + b - 2, k));
                end;
            end;     
            edges(i,j,k) = sqrt(magx^2 + magy^2); %#ok<AGROW>
        end;
    end;
end;

edges =uint8(edges);
imshow(edges)
imwrite(edges,'sobel_11712116_2.tif')
PQ=paddedsize(size(image));
H=freqz2(kernelx,PQ(1),PQ(2));
H1=ifftshift(H);
gf=dftfilt(image,H1);
figure,imshow(abs(gf),[])
imwrite()    
imwrite(abs(gf),'sobel_11712116_3.tif')
function PQ = paddedsize(AB,CD,~ )
%PADDEDSIZE Computes padded sizes useful for FFT-based filtering.
%   Detailed explanation goes here
if nargin == 1
    PQ = 2*AB;
elseif nargin ==2 && ~ischar(CD)
    PQ = QB +CD -1;
    PQ = 2*ceil(PQ/2);
elseif nargin == 2
    m = max(AB);%maximum dimension
    
    %Find power-of-2 at least twice m.
    P = 2^nextpow(2*m);
    PQ = [P,P];
elseif nargin == 3
    m = max([AB CD]);%maximum dimension
    P = 2^nextpow(2*m);
    PQ = [P,P];
else 
    error('Wrong number of inputs');

end

function g = dftfilt(f,H)

F=fft2(f,size(H,1),size(H,2));
g=real(ifft2(H.*F));
g=g(1:size(f,1),1:size(f,2));